kyoServer API Documenation

1. О получении данных

Для всех видов записей, будь то посты блога, вики или товара существует ряд правил обращения к серверу.

Для получения всех записей в той или иной категории мы обращаемся к корню API и указываем что мы хотим увидеть.

Сделаем GET запрос к серверу по пути server:port/api/post.
Сервер ответит нам json со следующим содержимым:
{"count":2,"rows":[{"id":1,"title":"Updated title","description":"Updated desc","img":null,"createdAt":"2022-03-14T19:22:21.610Z","updatedAt":"2022-03-14T19:23:05.631Z","userId":null},{"id":2,"title":"Product with image","description":"Product with image test again","img":"66f38af9-c33b-4236-a49c-5a0c930952b2.jpg","createdAt":"2022-03-15T07:38:10.455Z","updatedAt":"2022-03-15T07:38:10.455Z","userId":null}]}

count - общее количество записей в выбранной таблице базы, в нашем случае постов.
rows - содержит все записи\товары которые есть в базе.

Для получаемых результатов можно устанавливать значения кол-ва на странице, для этого необходимо указать соответствующие параметры в запросе.

Сделаем GET запрос к серверу установив лимит для страницы в одну запись - server:port/api/post?limit=1
Если в примере выше мы получали оба товара, то теперь он будет всего один, а именно:
{"count":2,"rows":[{"id":1,"title":"Updated title","description":"Updated desc","img":null,"createdAt":"2022-03-14T19:22:21.610Z","updatedAt":"2022-03-14T19:23:05.631Z","userId":null}]}

Таким образом мы задали лимит записей для одной страницы, чтобы перейти на следующую страницу немного расширим запрос - http://localhost:5000/api/post?limit=1&page=2
Теперь мы получим второй товар, который из-за установленного лимита оказался на следующей странице:
{"count":2,"rows":[{"id":2,"title":"Product with image","description":"Product with image test again","img":"66f38af9-c33b-4236-a49c-5a0c930952b2.jpg","createdAt":"2022-03-15T07:38:10.455Z","updatedAt":"2022-03-15T07:38:10.455Z","userId":null}]}

2. Добавление данных

Добавление записей в базу осуществляется посредством POST-запросов к API. Данные передаются в виде форм multipart/form-data.
О полях конкретной модели можно узнать в файле моделей в каталоге models сервера.

3. Обновление данных

Обновление осуществляется тем же образом что и добавление, с той лишь разницей что при обновлении записи
в форме появляется поле id которое указывает на конкретную запись, а POST-запрос делается на API с добавлением пути update - server:port/api/post/update

4. Удаление данных

Для удаления записи из базы делаем POST-запрос к API с добавлением пути remove - server:port/api/post/remove
Чтобы указать какую запись необходимо удалить указываем ПАРАМЕТРОМ к запросу id самой записи - server:port/api/post/remove?id=2

